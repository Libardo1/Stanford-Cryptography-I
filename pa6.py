import gmpy2
from gmpy2 import mpz
from binascii import unhexlify

nums = [
mpz(
'17976931348623159077293051907890247336179769789423065727343008115\
77326758055056206869853794492129829595855013875371640157101398586\
47833778606925583497541085196591615128057575940752635007475935288\
71082364994994077189561705436114947486504671101510156394068052754\
0071584560878577663743040086340742855278549092581'),
mpz(
'6484558428080716696628242653467722787263437207069762630604390703787\
9730861808111646271401527606141756919558732184025452065542490671989\
2428844841839353281972988531310511738648965962582821502504990264452\
1008852816733037111422964210278402893076574586452336833570778346897\
15838646088239640236866252211790085787877'),
mpz(
'72006226374735042527956443552558373833808445147399984182665305798191\
63556901883377904234086641876639384851752649940178970835240791356868\
77441155132015188279331812309091996246361896836573643119174094961348\
52463970788523879939683923036467667022162701835329944324119217381272\
9276147530748597302192751375739387929'),
mpz(
'22096451867410381776306561134883418017410069787892831071731839143676\
13560012053800428232965047350942434394621975151225646583996794288946\
07645420405815647489880137348641204523252293201764879166664029975091\
88729971690526083222067771600019329260870009579993724077458967773697\
817571267229951148662959627934791540')
]

# Task 1

N = nums[0]
A = gmpy2.isqrt(N) + 1
x = gmpy2.isqrt(A * A - N)
p1, q1 = A - x, A + x
print 'Task 1\t', p1

# Task 2

N = nums[1]
A = gmpy2.isqrt(N) + 1
while True:
    x = gmpy2.isqrt(A * A - N)
    p, q = A - x, A + x
    if N == p * q:
        print 'Task 2\t', p
        break
    A += 1
    
# Task 3

N = nums[2]
A = gmpy2.isqrt(6 * N) + 1
a = mpz(1)
b = mpz(-1)
c = -(A * A - A - 6 * N)
delta = b * b - 4 * a * c
roots = (gmpy2.div(-b + gmpy2.isqrt(b * b - 4 * a * c), 2 * a), gmpy2.div(-b - gmpy2.isqrt(b * b - 4 * a * c), 2 * a))

for i in roots:
    if i < 0:
        continue
    p, q = gmpy2.div(A + i - 1, 3), gmpy2.div(A - i, 2)
    if N == p * q:
        print 'Task 3\t', p
        break
    q, p = gmpy2.div(A + i - 1, 2), gmpy2.div(A - i, 3)
    if N == p * q:
        print 'Task 3\t', p
        break

# Task 4

ct = nums[3]
N = nums[0]
e = 65537
phiN = N - p1 - q1 + 1
print phiN, '\n'
d = gmpy2.invert(e, phiN)
pt = gmpy2.powmod(ct, d, N)
ptHex = hex(pt)
pos = ptHex.find('00')
print unhexlify(ptHex[pos+2:])
        
'''
13407807929942597099574024998205846127479365820592393377723561443721764030073662768891111614362326998675040546094339320838419523375986027530441562135724301

25464796146996183438008816563973942229341454268524157846328581927885777969985222835143851073249573454107384461557193173304497244814071505790566593206419759

21909849592475533092273988531583955898982176093344929030099423584127212078126150044721102570957812665127475051465088833555993294644190955293613411658629209

Factoring lets us break RSA.
'''